<%= javascript_include_tag "rickshaw" %>
<%= stylesheet_link_tag    "rickshaw" %>
<%= javascript_include_tag "clizia" %>
<%= stylesheet_link_tag    "clizia" %>
<%= include_gon %>

<div class="slider" id="slider"></div>
<span id="zoomtoselected" class="no_link zoomtoselected"></span>
<% @metrics.each_with_index do |m, index| %>
	<div id="chart_<%=index%>_container">
<div class="graph_title">
	<h4>
		<a href="#" data-toggle="tooltip-always-metric" data-html="true" 
			data-original-title="<%= m.metadata_table %>" class="plaid"><%= m.titleize %></a>
		<div id="metric_<%=index%>_url" class="metric_url"></div>
		<div id="remove_metric_<%=index%>" class="remove_metric"></div>
	</h4>
</div>

<div id="<%="chart_#{index}"%>"></div>
</div>
<% end # @gon%>

<script>

charts = []
slider = Clizia.Graph.Rickshaw.Slider({element: "slider", length: gon.metrics.length})

Clizia.Utils.ProgressBar(gon.metrics.length);  //instantiate a progress bar


config = { 
	base: gon.base, 
	clock: gon.clock,
	slider: slider, 
	dynamic: true,
	zeromin: <%= to_bool(check_param(:zeromin, ["on","off"] || false)) %>
}


start = gon.start; stop = gon.stop; step = gon.step
for (n = 0; n < gon.metrics.length; n++) { 
	m = gon.metrics[n]

	setting = {  
		metric: gon.metrics[n], 
		chart: "chart_"+n, 
		showurl: "metric_"+n+"_url",
		removeurl: "remove_metric_"+n
	}

	setting.metric.feed =  metricURL(m.feed_base, start, stop, step)

	chart = new Clizia.Graph.Rickshaw.Standard($.extend(config, setting))

	chart.render()
	charts.push(chart)
}



var intervalID;
function stopUpdates() { clearInterval(intervalID);} 
function startUpdates() { 
	intervalID = setInterval(function(d){ 
			charts.forEach(function(d,i) { 
				span = stop - start
				now =  +new Date() / 1000 
		
				start = now - span
				stop = now 
					
				feed = metricURL(gon.metrics[i].feed_base, start, stop, step)
				d.update({metric: {feed: feed}})
				})
			}, gon.step * 1000 )
		
}
function removechart(metric, newurl) { 
	// remove dom object
	var chart_id = $.grep(charts, function(d,i) { return d.metric.id == metric})[0].chart


        $("#"+chart_id).parent().remove()
        
        //remove object from charts by object
        rm = $.grep(charts, function(d) {return d.metric.id === metric})[0]
        charts = $.grep(charts, function(d) { return d != rm })


	 //Rebuild slider, if exists
        if (typeof slider === "object") { 
                $.each($("#"+slider.element).children(), function(i,d) { d.remove() })
                slider = Clizia.Graph.Rickshaw.Slider({element: "slider", length: charts.length})
                $.each(charts, function(i,d) { slider.render({graphs: d.graph})})
        }

	// Throw to general functionality
	general_removechart(metric, newurl, charts.length)
} 

</script>

