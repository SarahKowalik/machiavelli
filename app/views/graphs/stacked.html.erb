<%= javascript_include_tag "rickshaw" %>
<%= stylesheet_link_tag    "rickshaw" %>
<%= javascript_include_tag "clizia" %>
<%= stylesheet_link_tag    "clizia" %>
<%= stylesheet_link_tag    "graphs/stacked" %>


<%= stylesheet_link_tag    "graphs/dckx" if dckx %>

<div class="slider" id="slider"></div>
<span id="zoomtoselected" class="no_link zoomtoselected"></span>

<div id="chart">
<div class="y_axis right_axis" id="y_axis_right"></div>
</div>
<div class="legend" id="legend-dual"></div>

<script>
var data = [], metrics =  [], format_metrics = [], right_links = [], left_links = [];
var reset = "<%= obl_qs :right%>";

var right_id = <%= (que_qs :right).to_json.html_safe%>;
if ( right_id == [""]) { right_id = null; }


Clizia.Utils.ProgressBar(gon.metrics.length); 

slider = Clizia.Graph.Rickshaw.Slider({element: "slider", length: 1})


<% @metrics.each do |m| %>
	metrics.push("<%= m.id %>");
	format_metrics.push("<%= m.titleize%>")
	right_links.push("<%= add_qs :right, m.id%>");
	left_links.push("<%= rem_qs :right, m.id%>");
<%end%>

// Div IDS
divs = {
	chart:  "chart", 
	legend: "legend-dual", 
	y2axis: "y_axis_right",
	slider: slider
}

// query bounds
st  = { 
	start: gon.start, 
	stop:  gon.stop, 
	step:  gon.step
}


// Graph objects
graph = {
	metric:      gon.metrics,
	base:        gon.base,
	right:       right_id, 
	right_links: right_links,
	left_links:  left_links,
	dynamic: true
}
// Extra GUI
gui  = {
	renderer: "<%= check_param(:render, ["line","area","bar"]) || "line" %>",
	stack: <%= to_bool(check_param(:stack, ["on","off"]) || ui_defaults("stack")) %>,
	zeromin: <%= to_bool(check_param(:zeromin, ["on","off"] || false)) %>,
	clock: "<%= check_param(:clock, ["utc","local"] || ui_defaults("clock")) %>"
} 

<% if dckx %> gui.renderer = "xkcd"<% end %>

var settings = $.extend({}, divs, st, graph, gui)

chart = new Clizia.Graph.Rickshaw.Stacked(settings)
chart.render()

var intervalID;
function startUpdates() { 
	 intervalID = setInterval(function(d){  chart.update()}, gon.step * 1000 )
}
function stopUpdates()  { 
	clearInterval(intervalID); 
} 
function removechart(metric, newurl) { 
	if (chart.graph.series.length - 1 == 0) { 
		window.location.replace(window.location.origin); return true
	} 

	index = $.map(chart.metric,function(d,i){return d.id}).indexOf(metric)
	chart.graph.series.splice(index,1)
	chart.graph.render()
	general_removechart(metric,newurl,chart.graph.series.length)
} 
</script>
